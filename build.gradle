//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAssignabilityCheck
import groovy.json.JsonSlurper

import java.nio.file.Files
import java.util.regex.Pattern
import java.util.stream.Collectors

plugins {
    id 'java'
    id 'xyz.jpenilla.run-paper' version '1.0.6'
    id 'net.minecrell.plugin-yml.paper' version '0.6.0'
}

def targetMinecraftVersion = '1.20.1'
def targetJavaVersion = 17

group = 'me.supcheg'
version = '1.0.1'

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url "https://libraries.minecraft.net" }
    maven { url 'https://jitpack.io/' }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    implementation "io.papermc.paper:paper-api:${targetMinecraftVersion}-R0.1-SNAPSHOT"
    implementation 'com.mojang:brigadier:1.0.18'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.github.Querz:NBT:6.1'
    paperLibrary 'com.github.Querz:NBT:6.1'
    implementation files('lib/Chunky-1.3.92.jar')
    implementation files('lib/paper-mojangapi-1.20.1-R0.1-SNAPSHOT.jar')
    def lombokDependency = 'org.projectlombok:lombok:1.18.28'
    annotationProcessor lombokDependency
    compileOnly lombokDependency

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation('com.github.seeseemelk:MockBukkit-v1.20:3.9.0') { exclude group: 'io.papermc.paper' }
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'
    testAnnotationProcessor lombokDependency
    testCompileOnly lombokDependency
}

paper {
    name = 'AdvancedManHunt'
    version = project.version
    description = 'Running multiple ManHunt games on the same server at once'
    website = 'https://github.com/Pupcheg/AdvancedManHunt'
    author = 'Supcheg'

    main = 'me.supcheg.advancedmanhunt.paper.PaperPlugin'
    loader = 'me.supcheg.advancedmanhunt.paper.ConfigLibraryResolver'

    apiVersion = withoutMaintenance(targetMinecraftVersion)

    generateLibrariesJson = true

    serverDependencies {
        'Chunky' {
            required = false
            load = 'BEFORE'
        }
    }

    permissions {
        'advancedmanhunt.notifications' {
            setDefault('OP')
        }
    }
}

private static String withoutMaintenance(String version) {
    return version.chars().filter { it == '.' }.count() == 1 ?
            version : version.substring(0, version.lastIndexOf('.'))
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

compileJava {
    def keyFinder = Pattern.compile('(?:key|translatable)\\("([a-z._]+)"')

    def usedKeys = Files.walk(file('src/main/java').toPath())
            .filter { Files.isRegularFile(it) }
            .flatMap { keyFinder.matcher(it.text).results() }
            .map { it.group(1) }
            .collect(Collectors.toUnmodifiableSet())

    file('src/main/resources/lang').eachFile {
        def json = new JsonSlurper().parseText(it.text) as Map<String, Object>
        def allKeys = json.keySet()

        if (allKeys != usedKeys) {
            throw new IllegalStateException()
        }
    }
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
}

tasks {
    runServer {
        minecraftVersion targetMinecraftVersion
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion)
}

compileJava {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
    options.encoding = 'UTF-8'
}
