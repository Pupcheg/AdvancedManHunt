//file:noinspection GrUnresolvedAccess


import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.nio.file.FileSystems
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.BasicFileAttributes
import java.util.regex.Pattern
import java.util.stream.Collectors

plugins {
    id 'java'
    id 'net.minecrell.plugin-yml.paper' version "${paper_plugin_yml_version}"
    id 'xyz.jpenilla.run-paper' version "${run_paper_version}"
}

group = 'me.supcheg'
version = '1.0.1'

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://libraries.minecraft.net' }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    implementation "io.papermc.paper:paper-api:${minecraft_version}-R0.1-SNAPSHOT"
    implementation "com.mojang:brigadier:${brigadier_version}"
    implementation project(':injector')
    implementation files('lib/Chunky-1.3.92.jar')
    implementation files('lib/paper-mojangapi-1.20.1-R0.1-SNAPSHOT.jar')

    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    compileOnly "org.projectlombok:lombok:${lombok_version}"

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation platform("org.junit:junit-bom:${junit_version}")
    testImplementation("com.github.seeseemelk:MockBukkit-v${api_version}:${mock_bukkit_version}") { exclude group: 'io.papermc.paper' }
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4j_simple_version}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${lombok_version}"

    library "org.javassist:javassist:${javaassist_version}"
}

test {
    useJUnitPlatform()
}

runServer {
    minecraftVersion minecraft_version
    jvmArgs = [
            '-Xms1G',
            '-Xmx2G',
            '-XX:+UseG1GC',
            '-XX:+ParallelRefProcEnabled',
            '-XX:MaxGCPauseMillis=200',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:+DisableExplicitGC',
            '-XX:+AlwaysPreTouch',
            '-XX:G1NewSizePercent=30',
            '-XX:G1MaxNewSizePercent=40',
            '-XX:G1HeapRegionSize=8M',
            '-XX:G1ReservePercent=20',
            '-XX:G1HeapWastePercent=5',
            '-XX:G1MixedGCCountTarget=4',
            '-XX:InitiatingHeapOccupancyPercent=15',
            '-XX:G1MixedGCLiveThresholdPercent=90',
            '-XX:G1RSetUpdatingPauseTimePercent=5',
            '-XX:SurvivorRatio=32',
            '-XX:+PerfDisableSharedMem',
            '-XX:MaxTenuringThreshold=1',
            '-Dusing.aikars.flags=https://mcflags.emc.gs',
            '-Daikars.new.flags=true'
    ]
}

paper {
    name = 'AdvancedManHunt'
    version = project.version
    description = 'Running multiple ManHunt games on the same server at once'
    website = 'https://github.com/Pupcheg/AdvancedManHunt'
    author = 'Supcheg'

    main = 'me.supcheg.advancedmanhunt.paper.PaperPlugin'
    bootstrapper = 'me.supcheg.advancedmanhunt.paper.InjectorBootstrap'
    loader = 'me.supcheg.advancedmanhunt.paper.ConfigLibraryResolver'
    generateLibrariesJson = true

    apiVersion = api_version

    serverDependencies {
        'Chunky' {
            required = false
            load = 'BEFORE'
        }
    }

    permissions {
        'advancedmanhunt.notifications' {
            setDefault('OP')
        }
        'advancedmanhunt.game.configure_any' {}
        'advancedmanhunt.debug' {}
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

//<editor-fold desc="task:checkTranslationKeysUses" defaultstate="collapsed">
tasks.register('checkTranslationKeysUses') {
    def keyFinder = Pattern.compile('(?:key|translatable)\\("([a-z._]+)"')

    def usedKeys = Files.walk(file('src/main/java').toPath())
            .filter { Files.isRegularFile(it) }
            .flatMap { keyFinder.matcher(it.text).results() }
            .map { it.group(1) }
            .collect(Collectors.toUnmodifiableSet())

    file('resourcepack/advancedmanhunt/lang').eachFile {
        def json = new JsonSlurper().parseText(it.text)
        def allKeys = json.keySet()

        if (allKeys != usedKeys) {
            def notUsed = new HashSet<>(allKeys)
            notUsed.removeAll(usedKeys)

            def notDefined = new HashSet<>(usedKeys)
            notDefined.removeAll(allKeys)

            throw new IllegalStateException("Not used: ${notUsed}. Not defined: ${notDefined}")
        }
    }
}
//</editor-fold>

compileJava {
    dependsOn(checkTranslationKeysUses)
}

//<editor-fold desc="task:generateResourcePack" defaultstate="collapsed">
tasks.register('generateResourcePack') {
    def namespace = rootProject.name.toLowerCase()

    def resourcepackDir = file('resourcepack').toPath()

    def assets = new JsonSlurper().parse(resourcepackDir.resolve('assets.json'))


    def outFile = layout.buildDirectory.get().asFile.toPath().resolve("libs/${namespace}.zip")
    Files.deleteIfExists(outFile)
    Files.createDirectories(outFile.parent)

    try (def outFileSystem = FileSystems.newFileSystem(outFile, ['create': true])) {
        def assetsDir = outFileSystem.getPath('assets')
        def itemModels = assetsDir.resolve("${namespace}/models/item")
        def itemTextures = assetsDir.resolve("${namespace}/textures/item")
        def guiTextures = assetsDir.resolve("${namespace}/textures/gui")
        def guiFont = assetsDir.resolve("${namespace}/font/gui.json")
        def paper = assetsDir.resolve('minecraft/models/item/paper.json')
        def defaultFont = assetsDir.resolve('minecraft/font/default.json')
        def langDir = assetsDir.resolve("${namespace}/lang")

        def paperJson = [
                'parent'   : 'minecraft:item/generated',
                'textures' : [
                        'layer0': 'minecraft:item/paper'
                ],
                'overrides': []
        ]
        def guis = [
                'providers': []
        ]

        def resources = [
                'buttons': [],
                'guis'   : []
        ]

        Files.createDirectories(itemModels)
        Files.createDirectories(itemTextures)

        Files.createDirectories(guiTextures)
        Files.createDirectories(paper.parent)
        Files.createDirectories(guiFont.parent)
        Files.createDirectories(defaultFont.parent)
        Files.createDirectories(langDir)

        def curModel = 0
        def curChar = 1

        def rootDir = resourcepackDir.resolve(assets['root'] as String)

        for (def item in assets['item']) {
            def assetPath = rootDir.resolve(item as String)
            def customModelData = 2500 + curModel

            Files.writeString(
                    itemModels.resolve("${curModel}.json"),
                    JsonOutput.toJson([
                            'parent'  : 'minecraft:item/generated',
                            'textures': [
                                    'layer0': "${namespace}:item/${curModel}"
                            ]
                    ])
            )
            Files.copy(assetPath, itemTextures.resolve("${curModel}.png"))

            paperJson['overrides'] += [
                    'model'    : "${namespace}:item/${curModel}",
                    'predicate': [
                            'custom_model_data': customModelData
                    ]
            ]

            resources['buttons'] += [
                    'key'              : item,
                    'custom_model_data': customModelData
            ]

            curModel++
        }

        for (def aChar in assets['char']) {
            def assetPath = rootDir.resolve(aChar as String)

            guis['providers'] += [
                    'type'  : 'bitmap',
                    'file'  : "${namespace}:gui/${curChar}.png",
                    'ascent': 13,
                    'height': 131,
                    'chars' : [curChar as char]
            ]
            Files.copy(assetPath, guiTextures.resolve("${curChar}.png"))

            resources['guis'] += [
                    'key'     : aChar,
                    'font'    : "${namespace}:gui",
                    'alt_char': "${curChar as char}"
            ]

            curChar++
        }

        for (def lang in assets['lang']) {
            def assetPath = rootDir.resolve(lang as String)
            Files.copy(assetPath, langDir.resolve(assetPath.getFileName().toString()))
        }

        Files.writeString(guiFont, JsonOutput.toJson(guis))
        Files.writeString(paper, JsonOutput.toJson(paperJson))

        Files.writeString(defaultFont, '{"providers":[{"type":"space","advances":{"\uF808":-8}}]}')
        Files.copy(resourcepackDir.resolve(assets['meta'] as String), outFileSystem.getPath('pack.mcmeta'))


        def resourcesJson = layout.buildDirectory.get().asFile.toPath().resolve('resources/main/resources.json')
        Files.createDirectories(resourcesJson.parent)
        Files.writeString(resourcesJson, JsonOutput.toJson(resources))

        if (project.hasProperty('copyResourcepack')) { // -PcopyResourcepack
            def dest = Path.of(project.properties['copyResourcepack'] as String)
            def unzip = project.hasProperty('unzipResourcepack')

            Files.createDirectories(dest.parent)
            if (unzip) {
                def zip = outFileSystem.getPath('')
                Files.walkFileTree(zip, new Win2ZipCopyFileVisitor(zip, dest))
                println "Unziped resourcepack to ${dest}"
            } else {
                Files.copy(outFile, dest, StandardCopyOption.REPLACE_EXISTING)
                println "Copied resourcepack to ${dest}"
            }
        }
    }
}

class Win2ZipCopyFileVisitor extends SimpleFileVisitor<Path> {
    private final Path targetPath
    private final Path sourcePath
    private boolean firstDirectory = true

    Win2ZipCopyFileVisitor(sourcePath, targetPath) {
        this.sourcePath = sourcePath
        this.targetPath = targetPath
    }

    @Override
    FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
        if (firstDirectory) {
            firstDirectory = false
        } else {
            Files.createDirectories(resolveDestFile(dir))
        }
        return FileVisitResult.CONTINUE
    }

    @Override
    FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        def dest = resolveDestFile(file)
        Files.createDirectories(dest.parent)
        Files.copy(file, dest, StandardCopyOption.REPLACE_EXISTING)
        return FileVisitResult.CONTINUE
    }

    private Path resolveDestFile(Path file) {
        return targetPath.resolve(sourcePath.resolve(file.toString()).toString())
    }
}
//</editor-fold>

java {
    sourceCompatibility = JavaVersion.toVersion(java_version)
    targetCompatibility = JavaVersion.toVersion(java_version)
}

jar {
    dependsOn(generateResourcePack)

    def injectorProject = project(':injector')
    def injectorJarTask = injectorProject.getTasksByName('reobfJar', false)[0]

    dependsOn(injectorJarTask)
    from zipTree(injectorJarTask.outputs.files.singleFile)
}

tasks.withType(JavaCompile).configureEach {
    def javaVersion = Integer.parseInt(java_version)

    options.release.set(javaVersion)
    options.encoding = 'UTF-8'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}
