//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck

import groovy.json.JsonSlurper
import java.nio.file.FileSystems
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.StandardCopyOption
import java.nio.file.attribute.BasicFileAttributes
import java.util.regex.Pattern
import java.util.stream.Collectors

plugins {
    id 'java'
    id 'net.minecrell.plugin-yml.paper' version '0.6.0'
    id 'de.undercouch.download' version '5.4.0'
}

def serverDir = file('run').toPath()
def serverCache = serverDir.resolve('cache')
def targetMinecraftVersion = '1.20.1'
def targetJavaVersion = 17

group = 'me.supcheg'
version = '1.0.1'

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://libraries.minecraft.net' }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    implementation "io.papermc.paper:paper-api:${targetMinecraftVersion}-R0.1-SNAPSHOT"
    implementation 'com.mojang:brigadier:1.0.18'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation files('lib/Chunky-1.3.92.jar')
    implementation files('lib/paper-mojangapi-1.20.1-R0.1-SNAPSHOT.jar')
    def lombokDependency = 'org.projectlombok:lombok:1.18.28'
    annotationProcessor lombokDependency
    compileOnly lombokDependency

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation('com.github.seeseemelk:MockBukkit-v1.20:3.9.0') { exclude group: 'io.papermc.paper' }
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'
    testAnnotationProcessor lombokDependency
    testCompileOnly lombokDependency
}

test {
    useJUnitPlatform()
}

paper {
    name = 'AdvancedManHunt'
    version = project.version
    description = 'Running multiple ManHunt games on the same server at once'
    website = 'https://github.com/Pupcheg/AdvancedManHunt'
    author = 'Supcheg'

    main = 'me.supcheg.advancedmanhunt.paper.PaperPlugin'
    loader = 'me.supcheg.advancedmanhunt.paper.ConfigLibraryResolver'

    apiVersion = withoutMaintenance(targetMinecraftVersion)

    serverDependencies {
        'Chunky' {
            required = false
            load = 'BEFORE'
        }
    }

    permissions {
        'advancedmanhunt.notifications' {
            setDefault('OP')
        }
    }
}

private static String withoutMaintenance(String version) {
    return version.chars().filter { it == '.' }.count() == 1 ?
            version : version.substring(0, version.lastIndexOf('.'))
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

//<editor-fold desc="task:checkTranslationKeysUses" defaultstate="collapsed">
tasks.register('checkTranslationKeysUses') {
    def keyFinder = Pattern.compile('(?:key|translatable)\\("([a-z._]+)"')

    def usedKeys = Files.walk(file('src/main/java').toPath())
            .filter { Files.isRegularFile(it) }
            .flatMap { keyFinder.matcher(it.text).results() }
            .map { it.group(1) }
            .collect(Collectors.toUnmodifiableSet())

    file('src/main/resources/lang').eachFile {
        def json = new JsonSlurper().parseText(it.text)
        def allKeys = json.keySet()

        if (allKeys != usedKeys) {
            throw new IllegalStateException()
        }
    }
}
//</editor-fold>

compileJava {
    dependsOn(checkTranslationKeysUses)
}

//<editor-fold desc="task:patchLatestPaperJar" defaultstate="collapsed">
tasks.register('patchLatestPaperJar') {
    Files.createDirectories(serverCache)

    download.run {
        src "https://api.papermc.io/v2/projects/paper/versions/${targetMinecraftVersion}"
        dest serverCache.toFile()
        quiet true
        onlyIfModified true
        overwrite true
    }
    def buildsFile = serverCache.resolve(targetMinecraftVersion)

    def lastId = new JsonSlurper().parseText(buildsFile.text).get('builds').last()
    def targetTokiJar = serverCache.resolve("toki-${targetMinecraftVersion}-${lastId}.jar")

    if (Files.exists(targetTokiJar)) {
        return
    }

    download.run {
        src "https://api.papermc.io/v2/projects/paper/versions/${targetMinecraftVersion}" +
                "/builds/${lastId}/downloads/paper-${targetMinecraftVersion}-${lastId}.jar"
        dest serverCache.toFile()
        overwrite false
    }
    def originalPaperJar = serverCache.resolve("paper-${targetMinecraftVersion}-${lastId}.jar")

    download.run {
        src 'https://github.com/TetraTau/Toki/releases/download/v0.1.3-1.19.4/toki-v0.1.3-1.19.4.jar'
        dest serverCache.toFile()
        overwrite false
    }
    def originalTokiJar = serverCache.resolve('toki-v0.1.3-1.19.4.jar')

    Files.copy(originalTokiJar, targetTokiJar, StandardCopyOption.REPLACE_EXISTING)
    transferPatchInfo(originalPaperJar, targetTokiJar, targetMinecraftVersion)

    Files.copy(targetTokiJar, serverCache.resolve('toki-latest.jar'), StandardCopyOption.REPLACE_EXISTING)
}

static void transferPatchInfo(paperPath, tokiPath, minecraftVersion) {
    try (def tokiFileSystem = FileSystems.newFileSystem(tokiPath.toAbsolutePath())) {
        try (def paperFileSystem = FileSystems.newFileSystem(paperPath.toAbsolutePath())) {

            def transferring = [
                    'patches.list', 'libraries.list', 'versions.list',
                    'main-class', 'download-context',
                    'versions', 'libraries'
            ]

            for (def fileName : transferring) {
                def sourcePath = paperFileSystem.getPath('META-INF', fileName)
                def destPath = tokiFileSystem.getPath('META-INF', fileName)

                Files.walkFileTree(sourcePath, new CopyFileVisitor(sourcePath, destPath))
            }
        }

        def tokiInstallProperties = tokiFileSystem.getPath('toki-install.properties')

        def install = new Properties()
        install.load(new StringReader(tokiInstallProperties.text))
        install.put('gameVersion', minecraftVersion)

        def stringWriter = new StringWriter()
        install.list(new PrintWriter(stringWriter))

        tokiInstallProperties.write(stringWriter.toString())
    }
}

class CopyFileVisitor extends SimpleFileVisitor<Path> {
    private final Path targetPath
    private final Path sourcePath
    private boolean firstDirectory = true

    CopyFileVisitor(sourcePath, targetPath) {
        this.sourcePath = sourcePath
        this.targetPath = targetPath
    }

    @Override
    FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
        if (firstDirectory) {
            firstDirectory = false
        } else {
            Files.createDirectories(targetPath.resolve(sourcePath.relativize(dir)))
        }
        return FileVisitResult.CONTINUE
    }

    @Override
    FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        Files.copy(file, targetPath.resolve(sourcePath.relativize(file)), StandardCopyOption.REPLACE_EXISTING)
        return FileVisitResult.CONTINUE
    }
}
//</editor-fold>

//<editor-fold desc="task:runServer" defaultstate="collapsed">
tasks.register('runServer', JavaExec.class) {
    dependsOn(build, patchLatestPaperJar)

    def latestTokiPath = serverCache.resolve('toki-latest.jar')

    def mainClassName
    try (def fs = FileSystems.newFileSystem(latestTokiPath)) {
        def metaInf = new Properties()

        try (def reader = fs.getPath('META-INF', 'MANIFEST.MF').newReader()) {
            metaInf.load(reader)
        }
        mainClassName = metaInf.get('Main-Class') as String
    }

    it.standardInput = System.in
    it.workingDir = serverDir.toFile()
    it.classpath = files(latestTokiPath.toString())
    it.mainClass = mainClassName
    it.args = [
            '-XX:+UseG1GC', '-XX:+ParallelRefProcEnabled', '-XX:MaxGCPauseMillis=200',
            '-XX:+UnlockExperimentalVMOptions', '-XX:+DisableExplicitGC', '-XX:+AlwaysPreTouch',
            '-XX:G1NewSizePercent=30', '-XX:G1MaxNewSizePercent=40', '-XX:G1HeapRegionSize=8M',
            '-XX:G1ReservePercent=20', '-XX:G1HeapWastePercent=5', '-XX:G1MixedGCCountTarget=4',
            '-XX:InitiatingHeapOccupancyPercent=15', '-XX:G1MixedGCLiveThresholdPercent=90',
            '-XX:G1RSetUpdatingPauseTimePercent=5', '-XX:SurvivorRatio=32', '-XX:+PerfDisableSharedMem',
            '-XX:MaxTenuringThreshold=1', '-Dusing.aikars.flags=https://mcflags.emc.gs',
            '-Daikars.new.flags=true', '-Dfile.encoding=UTF-8'
    ]

    def pluginJar = buildDir.toPath().resolve('libs')
            .resolve("${rootProject.name}-${version}.jar").toAbsolutePath().toString()
    it.args = ['nogui', "-add-plugin=${pluginJar}"]
}
//</editor-fold>

java {
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
}

jar {
    def injectorProject = project(':injector')

    dependsOn("${injectorProject.name}:build")
    from injectorProject.buildDir.toPath()
            .resolve('libs')
            .resolve("${injectorProject.name}.jar")
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion)
    options.encoding = 'UTF-8'
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}
