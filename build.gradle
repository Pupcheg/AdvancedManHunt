import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'xyz.jpenilla.run-paper' version '1.0.6'
}

def targetMinecraftVersion = '1.20.1'
def targetJavaVersion = 17

group = 'me.supcheg'
version = '1.0.1'

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url "https://libraries.minecraft.net" }
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    implementation "io.papermc.paper:paper-api:${targetMinecraftVersion}-R0.1-SNAPSHOT"
    implementation 'com.mojang:brigadier:1.0.18'
    implementation files('lib/Chunky-1.3.92.jar')
    implementation files('lib/paper-mojangapi-1.20.1-R0.1-SNAPSHOT.jar')

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation platform('org.junit:junit-bom:5.9.3')
    testImplementation('com.github.seeseemelk:MockBukkit-v1.19:3.1.0') {
        exclude group: 'io.papermc.paper'
    }
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'


    def lombokDependency = 'org.projectlombok:lombok:1.18.28'
    annotationProcessor lombokDependency
    testAnnotationProcessor lombokDependency
    compileOnly lombokDependency
    testCompileOnly lombokDependency
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

compileJava {
    def messages = file('src/main/java/me/supcheg/advancedmanhunt/player/Message.java').text

    file('src/main/resources/lang').eachFile {
        def json = new JsonSlurper().parseText(it.text) as Map<String, Object>

        for (def langKey in json.keySet()) {
            if (!messages.contains("\"${langKey}\"")) {
                throw new Exception("No '${langKey}' in messages")
            }
        }
    }
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
}

tasks {
    runServer {
        minecraftVersion targetMinecraftVersion
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion)
}

compileJava {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
    options.encoding = 'UTF-8'
}
